from collections import deque

def bfs(graph, start_node):
    queue = deque([start_node])
    visited = set([start_node])
    order_of_visit = []

    while queue:
        node = queue.popleft()
        order_of_visit.append(node)
        for neighbor in graph[node]:
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append(neighbor)

    return order_of_visit

def main():
    graph = {
        'A': ['B', 'C'],
        'B': ['A', 'D', 'E'],
        'C': ['A', 'F', 'G'],
        'D': ['B'],
        'E': ['B', 'H'],
        'F': ['C'],
        'G': ['C'],
        'H': ['E']
    }
    
    start_node = 'A'
    result = bfs(graph, start_node)
    print("BFS order of visit:", result)

if __name__ == "__main__":
    main()
