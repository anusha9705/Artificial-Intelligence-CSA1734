import heapq

class Node:
    def __init__(self, position, parent=None):
        self.position = position
        self.parent = parent
        self.g = 0 
        self.h = 0 
        self.f = 0 
    def __eq__(self, other):
        return self.position == other.position

    def __lt__(self, other):
        return self.f < other.f

def astar(maze, start, end):
    start_node = Node(start)
    end_node = Node(end)
    open_list = []
    closed_list = set()
    heapq.heappush(open_list, start_node)
    while open_list:
        current_node = heapq.heappop(open_list)
        closed_list.add(current_node.position)
        if current_node == end_node:
            path = []
            while current_node:
                path.append(current_node.position)
                current_node = current_node.parent
            return path[::-1]  
        for new_position in [(0, -1), (0, 1), (-1, 0), (1, 0)]:  
            node_position = (current_node.position[0] + new_position[0], current_node.position[1] + new_position[1])            if (node_position[0] > (len(maze) - 1) or 
                node_position[0] < 0 or 
                node_position[1] > (len(maze[0]) - 1) or 
                node_position[1] < 0):
                continue
            if maze[node_position[0]][node_position[1]] != 0:
                continue
            new_node = Node(node_position, current_node)
            if new_node.position in closed_list:
                continue
            new_node.g = current_node.g + 1
            new_node.h = ((new_node.position[0] - end_node.position[0]) ** 2) + ((new_node.position[1] - end_node.position[1]) ** 2)
            new_node.f = new_node.g + new_node.h
            if any(open_node for open_node in open_list if new_node == open_node and new_node.g > open_node.g):
                continue
            heapq.heappush(open_list, new_node)

    return None  
maze = [
    [0, 1, 0, 0, 0],
    [0, 1, 0, 1, 0],
    [0, 0, 0, 1, 0],
    [0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0]
]

start = (0, 0)
end = (4, 4)    

path = astar(maze, start, end)
print(f"The path from {start} to {end} is: {path}")
