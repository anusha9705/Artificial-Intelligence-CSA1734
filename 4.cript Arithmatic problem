import itertools

def solve_cryptarithmetic(puzzle):
    words = puzzle.replace('=', '+').split('+')
    words = [word.strip() for word in words]
    unique_chars = set(''.join(words))
    
    if len(unique_chars) > 10:
        return None 
    first_chars = {word[0] for word in words}
    digits = '0123456789'
    for perm in itertools.permutations(digits, len(unique_chars)):
        char_to_digit = dict(zip(unique_chars, perm))
        if '0' in (char_to_digit[c] for c in first_chars):
            continue

        if is_valid_solution(words, char_to_digit):
            return char_to_digit
    
    return None

def is_valid_solution(words, char_to_digit):
    nums = [int(''.join(char_to_digit[c] for c in word)) for word in words]
    return sum(nums[:-1]) == nums[-1]

def main():
    puzzle = "ONE + ONE = TWO"
    solution = solve_cryptarithmetic(puzzle)
    
    if solution:
        print(f"Solution for '{puzzle}':")
        for char, digit in solution.items():
            print(f"{char} -> {digit}")
    else:
        print(f"No solution found for '{puzzle}'")

if __name__ == "__main__":
    main()
