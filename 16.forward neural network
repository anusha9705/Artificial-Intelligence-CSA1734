import numpy as np

class NeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size):
        self.weights1 = np.random.randn(input_size, hidden_size) 
        self.bias1 = np.zeros((1, hidden_size))                  
        
        self.weights2 = np.random.randn(hidden_size, output_size) 
        self.bias2 = np.zeros((1, output_size))                   
        
    def sigmoid(self, x):
        return 1 / (1 + np.exp(-x))
    
    def sigmoid_derivative(self, x):
        return x * (1 - x)
    
    def forward(self, X):
        self.hidden_input = np.dot(X, self.weights1) + self.bias1
        self.hidden_output = self.sigmoid(self.hidden_input)
        
        self.output_input = np.dot(self.hidden_output, self.weights2) + self.bias2
        self.output = self.sigmoid(self.output_input)
        
        return self.output
    
    def backward(self, X, y, output, learning_rate):
        self.output_error = y - output
        self.output_delta = self.output_error * self.sigmoid_derivative(output)
        
        self.hidden_error = np.dot(self.output_delta, self.weights2.T)
        
        self.hidden_delta = self.hidden_error * self.sigmoid_derivative(self.hidden_output)
        self.weights2 += np.dot(self.hidden_output.T, self.output_delta) * learning_rate
        self.bias2 += np.sum(self.output_delta, axis=0, keepdims=True) * learning_rate
        
        self.weights1 += np.dot(X.T, self.hidden_delta) * learning_rate
        self.bias1 += np.sum(self.hidden_delta, axis=0, keepdims=True) * learning_rate
        
    def train(self, X, y, epochs, learning_rate):
        for epoch in range(epochs):
            output = self.forward(X)
            self.backward(X, y, output, learning_rate)
            loss = np.mean(np.square(y - output))
            if epoch % 1000 == 0:
                print(f"Epoch {epoch}, Loss: {loss}")
    
    def predict(self, X):
        return self.forward(X)
if __name__ == "__main__":
    X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
    y = np.array([[0], [1], [1], [0]])
    input_size = X.shape[1]
    hidden_size = 4
    output_size = 1
    learning_rate = 0.1
    epochs = 10000
    
    nn = NeuralNetwork(input_size, hidden_size, output_size)
    nn.train(X, y, epochs, learning_rate)
    test_data = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
    predictions = nn.predict(test_data)
    
    print("\nPredictions:")
    for i in range(len(test_data)):
        print(f"Input: {test_data[i]}, Predicted Output: {predictions[i]}")
