import heapq

class PuzzleState:
    def __init__(self, board, goal, blank_pos=None, moves=0, prev=None):
        self.board = board
        self.goal = goal
        self.blank_pos = blank_pos or self.find_blank()
        self.moves = moves
        self.prev = prev

    def find_blank(self):
        for i in range(3):
            for j in range(3):
                if self.board[i][j] == 0:
                    return i, j
        return None

    def __lt__(self, other):
        return self.heuristic() < other.heuristic()

    def __eq__(self, other):
        return self.board == other.board

    def __hash__(self):
        return hash(str(self.board))

    def heuristic(self):
        return self.manhattan_distance() + self.moves

    def manhattan_distance(self):
        distance = 0
        for i in range(3):
            for j in range(3):
                if self.board[i][j] != 0:
                    x, y = divmod(self.board[i][j] - 1, 3)
                    distance += abs(x - i) + abs(y - j)
        return distance

    def neighbors(self):
        x, y = self.blank_pos
        directions = [(x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)]
        valid_moves = [(dx, dy) for dx, dy in directions if 0 <= dx < 3 and 0 <= dy < 3]

        neighbors = []
        for dx, dy in valid_moves:
            new_board = [row[:] for row in self.board]
            new_board[x][y], new_board[dx][dy] = new_board[dx][dy], new_board[x][y]
            neighbors.append(PuzzleState(new_board, self.goal, (dx, dy), self.moves + 1, self))
        return neighbors

def a_star_search(start, goal):
    open_set = []
    heapq.heappush(open_set, (start.heuristic(), start))
    closed_set = set()

    while open_set:
        _, current = heapq.heappop(open_set)
        if current.board == goal:
            return reconstruct_path(current)
        closed_set.add(current)

        for neighbor in current.neighbors():
            if neighbor in closed_set:
                continue
            heapq.heappush(open_set, (neighbor.heuristic(), neighbor))

    return None

def reconstruct_path(state):
    path = []
    while state:
        path.append(state.board)
        state = state.prev
    return path[::-1]

def print_board(board):
    for row in board:
        print(' '.join(str(tile) if tile != 0 else ' ' for tile in row))
    print()

start_board = [
    [1, 2, 3],
    [4, 0, 5],
    [7, 8, 6]
]

goal_board = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 0]
]

start_state = PuzzleState(start_board, goal_board)
goal_state = PuzzleState(goal_board, goal_board)

solution = a_star_search(start_state, goal_state.board)

if solution:
    for step in solution:
        print_board(step)
else:
    print("No solution found.")
